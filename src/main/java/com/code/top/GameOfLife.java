package com.code.top;

/**
 *
 *
 * 根据百度百科，生命游戏，简称为生命，是英国数学家约翰·何顿·康威在1970年发明的细胞自动机。
 *
 * 给定一个包含 m × n 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞具有一个初始状态 live（1）即为活细胞， 或 dead（0）即为死细胞。每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：
 *
 * 1. 如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；
 * 2. 如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；
 * 3. 如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；
 * 4. 如果死细胞周围正好有三个活细胞，则该位置死细胞复活；
 *
 * 根据当前状态，写一个函数来计算面板上细胞的下一个（一次更新后的）状态。下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的，其中细胞的出生和死亡是同时发生的。
 *
 * 注：同时发生的，就表示不能在之前的数组上做修改。判断下一个细胞的状态的时候，要用到之前的细胞的状态，而不是上一个细胞修改后的状态。
 * 考虑镜像一个之前的数组，在此数组上记录变化，然后再将镜像数组更新到原始数组上
 *
 * 示例:
 *
 * 输入:
 * [
 *   [0,1,0],
 *   [0,0,1],
 *   [1,1,1],
 *   [0,0,0]
 * ]
 * 输出:
 * [
 *   [0,0,0],
 *   [1,0,1],
 *   [0,1,1],
 *   [0,1,0]
 * ]
 * 进阶:
 *
 * 你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。
 * 本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？
 *
 *
 * 原地算法：https://www.jianshu.com/p/567b1dc38db7
 *  原地算法不依赖额外的资源或者依赖少数的额外资源，仅依靠输出来覆盖输入的一种算法操作。
 *
 *  假设要将具有 n 项内容的数组 a 翻转过来。一种看似简单的方法是创建一个大小相等的新数组，用适当的顺序填充副本，然后再删除：
 *   function reverse(a[0..n-1])
 *      allocate b[0..n-1]  # 额外设定一个数组
 *      for i from 0 to n-1 # 从 0 到 n-1 遍历数组 a
 *          b[n -1 - i] := a[i]
 *      return b
 *
 *  这种方法虽然简单，但是需要 O(n) 的额外空间以使数组 a 和 b 同时可用。此外，分配存储空间和释放存储空间通常是缓慢的操作。如果我们不再需要数组 a 的话，可使用原地算法，用它自己翻转的内容来覆盖掉原先的内容。这样，无论数组有多大，它都只需要辅助变量 i 和 tmp：这样既节省了存储器空间又加快了运算速度。
 *   function reverse_in_place(a[0..n-1])
 *      for i from 0 to floor((n-2)/2)
 *          tmp := a[i]
 *          a[i] := a[n − 1 − i]
 *          a[n − 1 − i] := tmp
 *
 *
 *
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/game-of-life
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 *
 *
 *
 * Created by kunYang on 2019/07/02.
 */
public class GameOfLife {

    /**
     * 最直观的解法：
     *  遍历整个二维数组的元素，判断每一个元素的的周围的8个数字之和和给定的条件做比对，得到当前细胞的状态。
     * @param board
     */

    public void gameOfLifeSolution(int[][] board) {


    }




}
